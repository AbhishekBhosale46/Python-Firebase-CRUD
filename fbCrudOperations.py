# import streamlit as st
# import streamlit_authenticator as sauth
#
# names = ['Teacher1','Teacher2']
# usernames = ['teacher1','teacher2']
# passwords = ['teacher1','teacher2']
#
# hashed_passwords = sauth.Hasher(passwords).generate()
#
# authenticator = sauth.Authenticate(names,usernames,hashed_passwords,
#                 'some_cookie_name','some_signature_key',cookie_expiry_days=30)
#
# name, authentication_status, username = authenticator.login('Login','main')
#
# if st.session_state['authentication_status']:
#     authenticator.logout('Logout', 'main')
#     st.write('Welcome *%s*' % (st.session_state['name']))
#     st.title('Some content')
# elif st.session_state['authentication_status'] == False:
#     st.error('Username/password is incorrect')
# elif st.session_state['authentication_status'] == None:
#     st.warning('Please enter your username and password')

import pyrebase


firebaseConfig = { 'apiKey': "AIzaSyAB2ZRlEuIueuyssEoU8v7vFo_i7NvwWkE",
                   'authDomain': "pythonfirebase-f004f.firebaseapp.com",
                   'databaseURL': "https://pythonfirebase-f004f-default-rtdb.firebaseio.com/",
                   'projectId': "pythonfirebase-f004f",
                   'storageBucket': "pythonfirebase-f004f.appspot.com",
                   'messagingSenderId': "1092004919646",
                   'appId': "1:1092004919646:web:11ab928d8c3e13561b37cf",
                   'measurementId': "G-08VGHXL7XN"}


# --- INITIALIZE APP WITH GIVEN CONFIGURATIONS ---
firebase = pyrebase.initialize_app(firebaseConfig)


# --- CREATE A DATABASE ---
# Can create the hierarchy of the database using the following code
# db.child("Main Branch").child("Branch1").child("Subbranch1")
# db.child("Main Branch").child("Branch1").child("Subbranch2")
# db.child("Main Branch").child("Branch2").child("Subbranch1")
db = firebase.database()


# --- [1] SAVE THE DATA ---
# Save data with unique autogenerated key using push()
data = {"Name": "jack", "Age": "21"}
db.child("test").push(data)

# Save data with own key using set()
data = {"Name": "jill", "Age": "21"}
db.child("test").child("2").set(data)


# --- [2] UPDATE THE DATA ---
# Update data using update()
data = {"Name": "john", "Age": "22"}
db.child("test").child("2").update(data)


# --- [3] DELETE THE DATA ---
# Delete data using remove()
db.child("test").child("2").remove()


# --- [4] READ THE DATA ---
data = db.child("test").child("2").get()
print(data)                                 # get() returns the object of the data
print(data.val())                           # val() returns the dictionary of the data
print(data.key())                           # key() returns the key of the data

# Returns list of objects on each of which you can call val()/key()
data = db.child("test").get()
for node in data.each():
    print(node.key())
    print(node.val())

# Returns just the keys at particular path
data = db.child("test").shallow().get()
print(data.val())




